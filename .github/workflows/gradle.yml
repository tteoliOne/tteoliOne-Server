name: Java CI with Gradle

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ADMIN_MAIL_ID: ${{ secrets.ADMIN_MAIL_ID }}
          ADMIN_MAIL_PW: ${{ secrets.ADMIN_MAIL_PW }}
          JASYPT_PW: ${{ secrets.JASYPT_PW }}
          JASYPT_ALGO: ${{ secrets.JASYPT_ALGO }}
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          MONGO_TEST_URI: ${{ secrets.MONGO_TEST_URI }}
          SHARING_TOPIC: ${{ secrets.SHARING_TOPIC }}
          SHARING_GROUP_ID: ${{ secrets.SHARING_GROUP_ID }}
          SHARING_BROKER: ${{ secrets.SHARING_BROKER }}
          AGGREGATION_TOPIC: ${{ secrets.AGGREGATION_TOPIC }}
          AGGREGATION_GROUP_ID: ${{ secrets.AGGREGATION_GROUP_ID }}
          AGGREGATION_BROKER: ${{ secrets.AGGREGATION_BROKER }}
          TTEOLIONE_FCM_JSON: ${{ secrets.TTEOLIONE_FCM_JSON }}
      - name: Create env file
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "ADMIN_MAIL_ID=${{ secrets.ADMIN_MAIL_ID }}" >> .env
          echo "ADMIN_MAIL_PW=${{ secrets.ADMIN_MAIL_PW }}" >> .env
          echo "JASYPT_PW=${{ secrets.JASYPT_PW }}" >> .env
          echo "JASYPT_ALGO=${{ secrets.JASYPT_ALGO }}" >> .env
          echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> .env
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> .env
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
          echo "MONGO_TEST_URI=${{ secrets.MONGO_TEST_URI }}" >> .env
          echo "SHARING_TOPIC=${{ secrets.SHARING_TOPIC }}" >> .env
          echo "SHARING_GROUP_ID=${{ secrets.SHARING_GROUP_ID }}" >> .env
          echo "SHARING_BROKER=${{ secrets.SHARING_BROKER }}" >> .env
          echo "AGGREGATION_TOPIC=${{ secrets.AGGREGATION_TOPIC }}" >> .env
          echo "AGGREGATION_GROUP_ID=${{ secrets.AGGREGATION_GROUP_ID }}" >> .env
          echo "AGGREGATION_BROKER=${{ secrets.AGGREGATION_BROKER }}" >> .env
          echo "$TTEOLIONE_FCM_JSON" > src/main/resources/tteolione-firebase-adminsdk-fk0ms-ed40ba5d01.json
          

      ## GitHub Actions에 도커 권한 부여
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      ## 이미지 빌드 및 도커허브에 push
      - name: server docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/tteolione-server .
          docker push ${{ secrets.DOCKER_USERNAME }}/tteolione-server

      - name: nginx docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-nginx -t ${{ secrets.DOCKER_USERNAME }}/tteolione-nginx .
          docker push ${{ secrets.DOCKER_USERNAME }}/tteolione-nginx
 

      - name: Copy docker-compose.yaml to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          source: "/github/workspace/docker-compose.yaml"
          target: "/home/ubuntu/"

      - name: Copy .env to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          source: "/github/workspace/.env"
          target: "/home/ubuntu/"

      ## docker compose up
      # HOST : 인스턴스 주소
      # KEY : rsa - 전부 복사, % 제외
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/tteolione-server
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/tteolione-nginx
            sudo docker-compose -f /home/ubuntu/github/workspace/docker-compose.yaml down
            sudo docker-compose -f /home/ubuntu/github/workspace/docker-compose.yaml up -d --force-recreate
            sudo docker image prune -f
